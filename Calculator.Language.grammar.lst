
// ==========================================================================
//  GPPG error listing for yacc source file <Calculator/Calculator.Language.grammar.y - 9/26/2023 5:09:01PM>
// ==========================================================================
//  Version:  1.5.2
//  DateTime: 9/26/2023 5:09:03PM
// ==========================================================================


%namespace ChineseObjects.Calculator
%partial
%parsertype CalculatorParser
%visibility internal
%tokentype Token

%union { 
			public int n; 
			public string s; 
	   }

%start program

%token NUMBER, IDENTIFIER, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, P_OPEN, P_CLOSE
%token IS, END
%token CLASS, EXTENDS

%%
// Warning: NonTerminal symbol "line" is unreachable
// Warning: NonTerminal symbol "exp" is unreachable
// Warning: NonTerminal symbol "term" is unreachable
// Warning: NonTerminal symbol "factor" is unreachable
// Warning: NonTerminal symbol "number" is unreachable
// ---------------------------------------------------

program: classDeclaration               { }
       | classDeclaration program       { }
       ;

classDeclaration: CLASS IDENTIFIER IS memberDeclarations END {}
       | CLASS IDENTIFIER '[' EXTENDS identifiers ']' IS memberDeclarations END {}
       ;
       
identifiers: IDENTIFIER ',' identifiers          {}
       | IDENTIFIER                            {}
       ;

memberDeclarations: memberDeclaration memberDeclarations {}
       | memberDeclaration {}
       ;

memberDeclaration: IDENTIFIER {};

line   : exp				{ }
       ;

exp    : term                           { $$.n = $1.n;		 }
       | exp OP_PLUS term               { $$.n = $1.n + $3.n;	 }
       | exp OP_MINUS term              { $$.n = $1.n - $3.n;	 }
       ;

term   : factor				{$$.n = $1.n;		 }
       | term OP_MULT factor            {$$.n = $1.n * $3.n;	 }
       | term OP_DIV factor             {$$.n = $1.n / $3.n;	 }
       ; 

factor : number                         {$$.n = $1.n;		 }
       | P_OPEN exp P_CLOSE             {$$.n = $2.n;		 }
       ;

number : 
       | NUMBER				{  }
       ;

%%// ==========================================================================

