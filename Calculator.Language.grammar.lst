
// ==========================================================================
//  GPPG error listing for yacc source file <Calculator/Calculator.Language.grammar.y - 10/1/2023 11:38:10PM>
// ==========================================================================
//  Version:  1.5.2
//  DateTime: 10/1/2023 11:38:12PM
// ==========================================================================


%namespace ChineseObjects.Calculator
%partial
%parsertype CalculatorParser
%visibility internal
%tokentype Token

%union { 
			public int n; 
			public string s; 
	   }

%start program

%tokenIDENTIFIER, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, P_OPEN, P_CLOSE, COLON, DOT
//^^^^^^^^^^^^^^^
// Error: Unknown %keyword in this context
// Error: Syntax error, unexpected ','
// ---------------------------------------
%token IS, END, LOOP, THEN, RETURN, ELSE, WHILE, ASSIGN, IF
%token VAR, METHOD
%token CLASS, EXTENDS, THIS, NEW
%token INTEGER_LITERAL, REAL_LITERAL, BOOLEAN_LITERAL

%%

program: classDeclaration               { }
       | classDeclaration program       { }
       ;

classDeclaration: CLASS IDENTIFIER IS memberDeclarations END {}
       | CLASS IDENTIFIER EXTENDS identifiers IS memberDeclarations END {}
       ;
       
identifiers: IDENTIFIER ',' identifiers          {}
       | IDENTIFIER                            {}
       ;

memberDeclarations: memberDeclaration memberDeclarations {}
       | memberDeclaration {}
       ;

memberDeclaration: variableDeclaration    {}
 		 | methodDeclaration      {}
 		 | constructorDeclaration {}
 		 ;
 		 
variableDeclaration: VAR IDENTIFIER COLON exp;

methodDeclaration: METHOD IDENTIFIER P_OPEN parameters P_CLOSE COLON IDENTIFIER IS body END;

constructorDeclaration: THIS P_OPEN parameters P_CLOSE IS body END;

parameters: 
          | parameter ',' parameters
	  | parameter
	  ;
	 
parameter: IDENTIFIER COLON IDENTIFIER;

body: statement body
    | statement
    ;
    
statement: assignment
         | whileLoop
         | ifStatement
         | returnStatement
         ;
         
assignment: IDENTIFIER ASSIGN exp;

whileLoop: WHILE exp LOOP body END;

ifStatement: IF exp THEN body END
           | IF exp THEN body ELSE body END
           ;
           
returnStatement: RETURN exp;

exp    : exp DOT methodCall            { 	 }
       | primary                        { 	 }
       ;
       
methodCall: IDENTIFIER P_OPEN parameters P_CLOSE;
       
primary: classInstantiation             {}
       | INTEGER_LITERAL                {}
       | REAL_LITERAL                   {}
       | BOOLEAN_LITERAL                {}
       | THIS                           {}
       ;
       
classInstantiation: NEW IDENTIFIER P_OPEN parameters P_CLOSE;

%%// ==========================================================================

