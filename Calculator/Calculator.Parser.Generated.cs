// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 9/26/2023 5:09:03PM
// Input file <Calculator/Calculator.Language.grammar.y - 9/26/2023 5:09:01PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ChineseObjects.Calculator
{
internal enum Token {error=95,EOF=96,
    NUMBER=97,IDENTIFIER=98,OP_PLUS=99,OP_MINUS=100,OP_MULT=101,OP_DIV=102,
    P_OPEN=103,P_CLOSE=104,IS=105,END=106,CLASS=107,EXTENDS=108};

internal partial struct ValueType
{ 
			public int n; 
			public string s; 
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class CalculatorParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[22];
  private static State[] states = new State[23];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "classDeclaration", "memberDeclarations", "identifiers", 
      "memberDeclaration", "line", "exp", "term", "factor", "number", };

  static CalculatorParser() {
    states[0] = new State(new int[]{107,5},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{96,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{107,5,96,-2},new int[]{-1,4,-3,3});
    states[4] = new State(-3);
    states[5] = new State(new int[]{98,6});
    states[6] = new State(new int[]{105,7,91,13});
    states[7] = new State(new int[]{98,12},new int[]{-4,8,-6,10});
    states[8] = new State(new int[]{106,9});
    states[9] = new State(-4);
    states[10] = new State(new int[]{98,12,106,-9},new int[]{-4,11,-6,10});
    states[11] = new State(-8);
    states[12] = new State(-10);
    states[13] = new State(new int[]{108,14});
    states[14] = new State(new int[]{98,20},new int[]{-5,15});
    states[15] = new State(new int[]{93,16});
    states[16] = new State(new int[]{105,17});
    states[17] = new State(new int[]{98,12},new int[]{-4,18,-6,10});
    states[18] = new State(new int[]{106,19});
    states[19] = new State(-5);
    states[20] = new State(new int[]{44,21,93,-7});
    states[21] = new State(new int[]{98,20},new int[]{-5,22});
    states[22] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,96});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-3,-1});
    rules[4] = new Rule(-3, new int[]{107,98,105,-4,106});
    rules[5] = new Rule(-3, new int[]{107,98,91,108,-5,93,105,-4,106});
    rules[6] = new Rule(-5, new int[]{98,44,-5});
    rules[7] = new Rule(-5, new int[]{98});
    rules[8] = new Rule(-4, new int[]{-6,-4});
    rules[9] = new Rule(-4, new int[]{-6});
    rules[10] = new Rule(-6, new int[]{98});
    rules[11] = new Rule(-7, new int[]{-8});
    rules[12] = new Rule(-8, new int[]{-9});
    rules[13] = new Rule(-8, new int[]{-8,99,-9});
    rules[14] = new Rule(-8, new int[]{-8,100,-9});
    rules[15] = new Rule(-9, new int[]{-10});
    rules[16] = new Rule(-9, new int[]{-9,101,-10});
    rules[17] = new Rule(-9, new int[]{-9,102,-10});
    rules[18] = new Rule(-10, new int[]{-11});
    rules[19] = new Rule(-10, new int[]{103,-8,104});
    rules[20] = new Rule(-11, new int[]{});
    rules[21] = new Rule(-11, new int[]{97});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> classDeclaration
{ }
        break;
      case 3: // program -> classDeclaration, program
{ }
        break;
      case 4: // classDeclaration -> CLASS, IDENTIFIER, IS, memberDeclarations, END
{}
        break;
      case 5: // classDeclaration -> CLASS, IDENTIFIER, '[', EXTENDS, identifiers, ']', IS, 
              //                     memberDeclarations, END
{}
        break;
      case 6: // identifiers -> IDENTIFIER, ',', identifiers
{}
        break;
      case 7: // identifiers -> IDENTIFIER
{}
        break;
      case 8: // memberDeclarations -> memberDeclaration, memberDeclarations
{}
        break;
      case 9: // memberDeclarations -> memberDeclaration
{}
        break;
      case 10: // memberDeclaration -> IDENTIFIER
{}
        break;
      case 11: // line -> exp
{ }
        break;
      case 12: // exp -> term
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;		 }
        break;
      case 13: // exp -> exp, OP_PLUS, term
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n;	 }
        break;
      case 14: // exp -> exp, OP_MINUS, term
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n;	 }
        break;
      case 15: // term -> factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;		 }
        break;
      case 16: // term -> term, OP_MULT, factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n;	 }
        break;
      case 17: // term -> term, OP_DIV, factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n;	 }
        break;
      case 18: // factor -> number
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;		 }
        break;
      case 19: // factor -> P_OPEN, exp, P_CLOSE
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;		 }
        break;
      case 21: // number -> NUMBER
{  }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
