// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 10/1/2023 11:50:28PM
// Input file <Calculator/Calculator.Language.grammar.y - 10/1/2023 11:50:17PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ChineseObjects.Calculator
{
internal enum Token {error=46,EOF=47,IDENTIFIER=48,
    OP_PLUS=49,OP_MINUS=50,OP_MULT=51,OP_DIV=52,P_OPEN=53,P_CLOSE=54,
    COLON=55,DOT=56,IS=57,END=58,LOOP=59,THEN=60,
    RETURN=61,ELSE=62,WHILE=63,ASSIGN=64,IF=65,VAR=66,
    METHOD=67,CLASS=68,EXTENDS=69,THIS=70,NEW=71,INTEGER_LITERAL=72,
    REAL_LITERAL=73,BOOLEAN_LITERAL=74};

internal partial struct ValueType
{ 
			public int n; 
			public string s; 
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class CalculatorParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[44];
  private static State[] states = new State[95];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "classDeclaration", "memberDeclarations", "identifiers", 
      "memberDeclaration", "variableDeclaration", "methodDeclaration", "constructorDeclaration", 
      "expr", "parameters", "body", "parameter", "statement", "assignment", "whileLoop", 
      "ifStatement", "returnStatement", "methodCall", "primary", "arguments", 
      "argument", "classInstantiation", };

  static CalculatorParser() {
    states[0] = new State(new int[]{68,5},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{47,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{68,5,47,-2},new int[]{-1,4,-3,3});
    states[4] = new State(-3);
    states[5] = new State(new int[]{48,6});
    states[6] = new State(new int[]{57,7,69,87});
    states[7] = new State(new int[]{66,13,67,45,70,80},new int[]{-4,8,-6,10,-7,12,-8,44,-9,79});
    states[8] = new State(new int[]{58,9});
    states[9] = new State(-4);
    states[10] = new State(new int[]{66,13,67,45,70,80,58,-9},new int[]{-4,11,-6,10,-7,12,-8,44,-9,79});
    states[11] = new State(-8);
    states[12] = new State(-10);
    states[13] = new State(new int[]{48,14});
    states[14] = new State(new int[]{55,15});
    states[15] = new State(new int[]{71,29,72,40,73,41,74,42,70,43},new int[]{-10,16,-20,27,-23,28});
    states[16] = new State(new int[]{56,17,66,-13,67,-13,70,-13,58,-13});
    states[17] = new State(new int[]{48,19},new int[]{-19,18});
    states[18] = new State(-31);
    states[19] = new State(new int[]{53,20});
    states[20] = new State(new int[]{71,29,72,40,73,41,74,42,70,43,54,-34},new int[]{-21,21,-22,23,-10,26,-20,27,-23,28});
    states[21] = new State(new int[]{54,22});
    states[22] = new State(-33);
    states[23] = new State(new int[]{44,24,54,-36});
    states[24] = new State(new int[]{71,29,72,40,73,41,74,42,70,43,54,-34},new int[]{-21,25,-22,23,-10,26,-20,27,-23,28});
    states[25] = new State(-35);
    states[26] = new State(new int[]{56,17,44,-37,54,-37});
    states[27] = new State(-32);
    states[28] = new State(-38);
    states[29] = new State(new int[]{48,30});
    states[30] = new State(new int[]{53,31});
    states[31] = new State(new int[]{48,37,54,-16},new int[]{-11,32,-13,34});
    states[32] = new State(new int[]{54,33});
    states[33] = new State(-43);
    states[34] = new State(new int[]{44,35,54,-18});
    states[35] = new State(new int[]{48,37,54,-16},new int[]{-11,36,-13,34});
    states[36] = new State(-17);
    states[37] = new State(new int[]{55,38});
    states[38] = new State(new int[]{48,39});
    states[39] = new State(-19);
    states[40] = new State(-39);
    states[41] = new State(-40);
    states[42] = new State(-41);
    states[43] = new State(-42);
    states[44] = new State(-11);
    states[45] = new State(new int[]{48,46});
    states[46] = new State(new int[]{53,47});
    states[47] = new State(new int[]{48,37,54,-16},new int[]{-11,48,-13,34});
    states[48] = new State(new int[]{54,49});
    states[49] = new State(new int[]{55,50});
    states[50] = new State(new int[]{48,51});
    states[51] = new State(new int[]{57,52});
    states[52] = new State(new int[]{48,58,63,62,65,68,61,77},new int[]{-12,53,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[53] = new State(new int[]{58,54});
    states[54] = new State(-14);
    states[55] = new State(new int[]{48,58,63,62,65,68,61,77,58,-21,62,-21},new int[]{-12,56,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[56] = new State(-20);
    states[57] = new State(-22);
    states[58] = new State(new int[]{64,59});
    states[59] = new State(new int[]{71,29,72,40,73,41,74,42,70,43},new int[]{-10,60,-20,27,-23,28});
    states[60] = new State(new int[]{56,17,48,-26,63,-26,65,-26,61,-26,58,-26,62,-26});
    states[61] = new State(-23);
    states[62] = new State(new int[]{71,29,72,40,73,41,74,42,70,43},new int[]{-10,63,-20,27,-23,28});
    states[63] = new State(new int[]{59,64,56,17});
    states[64] = new State(new int[]{48,58,63,62,65,68,61,77},new int[]{-12,65,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[65] = new State(new int[]{58,66});
    states[66] = new State(-27);
    states[67] = new State(-24);
    states[68] = new State(new int[]{71,29,72,40,73,41,74,42,70,43},new int[]{-10,69,-20,27,-23,28});
    states[69] = new State(new int[]{60,70,56,17});
    states[70] = new State(new int[]{48,58,63,62,65,68,61,77},new int[]{-12,71,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[71] = new State(new int[]{58,72,62,73});
    states[72] = new State(-28);
    states[73] = new State(new int[]{48,58,63,62,65,68,61,77},new int[]{-12,74,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[74] = new State(new int[]{58,75});
    states[75] = new State(-29);
    states[76] = new State(-25);
    states[77] = new State(new int[]{71,29,72,40,73,41,74,42,70,43},new int[]{-10,78,-20,27,-23,28});
    states[78] = new State(new int[]{56,17,48,-30,63,-30,65,-30,61,-30,58,-30,62,-30});
    states[79] = new State(-12);
    states[80] = new State(new int[]{53,81});
    states[81] = new State(new int[]{48,37,54,-16},new int[]{-11,82,-13,34});
    states[82] = new State(new int[]{54,83});
    states[83] = new State(new int[]{57,84});
    states[84] = new State(new int[]{48,58,63,62,65,68,61,77},new int[]{-12,85,-14,55,-15,57,-16,61,-17,67,-18,76});
    states[85] = new State(new int[]{58,86});
    states[86] = new State(-15);
    states[87] = new State(new int[]{48,92},new int[]{-5,88});
    states[88] = new State(new int[]{57,89});
    states[89] = new State(new int[]{66,13,67,45,70,80},new int[]{-4,90,-6,10,-7,12,-8,44,-9,79});
    states[90] = new State(new int[]{58,91});
    states[91] = new State(-5);
    states[92] = new State(new int[]{44,93,57,-7});
    states[93] = new State(new int[]{48,92},new int[]{-5,94});
    states[94] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,47});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-3,-1});
    rules[4] = new Rule(-3, new int[]{68,48,57,-4,58});
    rules[5] = new Rule(-3, new int[]{68,48,69,-5,57,-4,58});
    rules[6] = new Rule(-5, new int[]{48,44,-5});
    rules[7] = new Rule(-5, new int[]{48});
    rules[8] = new Rule(-4, new int[]{-6,-4});
    rules[9] = new Rule(-4, new int[]{-6});
    rules[10] = new Rule(-6, new int[]{-7});
    rules[11] = new Rule(-6, new int[]{-8});
    rules[12] = new Rule(-6, new int[]{-9});
    rules[13] = new Rule(-7, new int[]{66,48,55,-10});
    rules[14] = new Rule(-8, new int[]{67,48,53,-11,54,55,48,57,-12,58});
    rules[15] = new Rule(-9, new int[]{70,53,-11,54,57,-12,58});
    rules[16] = new Rule(-11, new int[]{});
    rules[17] = new Rule(-11, new int[]{-13,44,-11});
    rules[18] = new Rule(-11, new int[]{-13});
    rules[19] = new Rule(-13, new int[]{48,55,48});
    rules[20] = new Rule(-12, new int[]{-14,-12});
    rules[21] = new Rule(-12, new int[]{-14});
    rules[22] = new Rule(-14, new int[]{-15});
    rules[23] = new Rule(-14, new int[]{-16});
    rules[24] = new Rule(-14, new int[]{-17});
    rules[25] = new Rule(-14, new int[]{-18});
    rules[26] = new Rule(-15, new int[]{48,64,-10});
    rules[27] = new Rule(-16, new int[]{63,-10,59,-12,58});
    rules[28] = new Rule(-17, new int[]{65,-10,60,-12,58});
    rules[29] = new Rule(-17, new int[]{65,-10,60,-12,62,-12,58});
    rules[30] = new Rule(-18, new int[]{61,-10});
    rules[31] = new Rule(-10, new int[]{-10,56,-19});
    rules[32] = new Rule(-10, new int[]{-20});
    rules[33] = new Rule(-19, new int[]{48,53,-21,54});
    rules[34] = new Rule(-21, new int[]{});
    rules[35] = new Rule(-21, new int[]{-22,44,-21});
    rules[36] = new Rule(-21, new int[]{-22});
    rules[37] = new Rule(-22, new int[]{-10});
    rules[38] = new Rule(-20, new int[]{-23});
    rules[39] = new Rule(-20, new int[]{72});
    rules[40] = new Rule(-20, new int[]{73});
    rules[41] = new Rule(-20, new int[]{74});
    rules[42] = new Rule(-20, new int[]{70});
    rules[43] = new Rule(-23, new int[]{71,48,53,-11,54});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> classDeclaration
{ }
        break;
      case 3: // program -> classDeclaration, program
{ }
        break;
      case 4: // classDeclaration -> CLASS, IDENTIFIER, IS, memberDeclarations, END
{}
        break;
      case 5: // classDeclaration -> CLASS, IDENTIFIER, EXTENDS, identifiers, IS, 
              //                     memberDeclarations, END
{}
        break;
      case 6: // identifiers -> IDENTIFIER, ',', identifiers
{}
        break;
      case 7: // identifiers -> IDENTIFIER
{}
        break;
      case 8: // memberDeclarations -> memberDeclaration, memberDeclarations
{}
        break;
      case 9: // memberDeclarations -> memberDeclaration
{}
        break;
      case 10: // memberDeclaration -> variableDeclaration
{}
        break;
      case 11: // memberDeclaration -> methodDeclaration
{}
        break;
      case 12: // memberDeclaration -> constructorDeclaration
{}
        break;
      case 31: // expr -> expr, DOT, methodCall
{ 	 }
        break;
      case 32: // expr -> primary
{ 	 }
        break;
      case 38: // primary -> classInstantiation
{}
        break;
      case 39: // primary -> INTEGER_LITERAL
{}
        break;
      case 40: // primary -> REAL_LITERAL
{}
        break;
      case 41: // primary -> BOOLEAN_LITERAL
{}
        break;
      case 42: // primary -> THIS
{}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
